apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "9555"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/adservice:v2.1
          name: server
          ports:
            - containerPort: 9555
          resources:
            limits:
              cpu: 300m
              memory: 300Mi
            requests:
              cpu: 200m
              memory: 180Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: adservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 9555
      targetPort: 9555
  selector:
    app: adservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      containers:
        - env:
            - name: REDIS_ADDR
              value: redis-cart:6379
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/cartservice:v2.1
          name: server
          ports:
            - containerPort: 7070
          resources:
            limits:
              cpu: 300m
              memory: 128Mi
            requests:
              cpu: 200m
              memory: 64Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 7070
      targetPort: 7070
  selector:
    app: cartservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "5050"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: productcatalogservice:3550
            - name: SHIPPING_SERVICE_ADDR
              value: shippingservice:50051
            - name: PAYMENT_SERVICE_ADDR
              value: paymentservice:50051
            - name: EMAIL_SERVICE_ADDR
              value: emailservice:5000
            - name: CURRENCY_SERVICE_ADDR
              value: currencyservice:7000
            - name: CART_SERVICE_ADDR
              value: cartservice:7070
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/checkoutservice:v2.1
          name: server
          ports:
            - containerPort: 5050
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 5050
      targetPort: 5050
  selector:
    app: checkoutservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "7000"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/currencyservice:v2.1
          name: server
          ports:
            - containerPort: 7000
              name: grpc
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 7000
      targetPort: 7000
  selector:
    app: currencyservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "8080"
            - name: DISABLE_PROFILER
              value: "1"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/emailservice:v2.1
          name: server
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: emailservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 5000
      targetPort: 8080
  selector:
    app: emailservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: default
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: frontend
    spec:
      containers:
        - env:
            - name: PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: productcatalogservice:3550
            - name: CURRENCY_SERVICE_ADDR
              value: currencyservice:7000
            - name: CART_SERVICE_ADDR
              value: cartservice:7070
            - name: RECOMMENDATION_SERVICE_ADDR
              value: recommendationservice:8080
            - name: SHIPPING_SERVICE_ADDR
              value: shippingservice:50051
            - name: CHECKOUT_SERVICE_ADDR
              value: checkoutservice:5050
            - name: AD_SERVICE_ADDR
              value: adservice:9555
            - name: ENV_PLATFORM
              value: aws
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/frontend:v2.1
          name: server
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: default
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app: frontend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-external
  namespace: default
spec:
  ports:
    - name: http
      port: 8081
      targetPort: 8080
  selector:
    app: frontend
  type: LoadBalancer
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: paymentservice
  namespace: default
spec:
  serviceName: "paymentservice"
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "50051"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/paymentservice:v2.1
          name: server
          ports:
            - containerPort: 50051
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
  volumeClaimTemplates: []

---
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 50051
      targetPort: 50051
  selector:
    app: paymentservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: productcatalogservice
  namespace: default
spec:
  serviceName: "productcatalogservice"
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "3550"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/productcatalogservice:v2.1
          name: server
          ports:
            - containerPort: 3550
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
  volumeClaimTemplates: []

---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 3550
      targetPort: 3550
  selector:
    app: productcatalogservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: productcatalogservice:3550
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/recommendationservice:v2.1
          name: server
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 200m
              memory: 450Mi
            requests:
              cpu: 100m
              memory: 220Mi
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 8080
      targetPort: 8080
  selector:
    app: recommendationservice
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
  namespace: default
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      containers:
        - image: redis:alpine
          livenessProbe:
            periodSeconds: 5
            tcpSocket:
              port: 6379
          securityContext:
            capabilities:
              drop:
                - all
          name: redis
          ports:
            - containerPort: 6379
          readinessProbe:
            periodSeconds: 5
            tcpSocket:
              port: 6379
          resources:
            limits:
              cpu: 125m
              memory: 256Mi
            requests:
              cpu: 70m
              memory: 200Mi
          volumeMounts:
            - mountPath: /data
              name: redis-data
      volumes:
        - emptyDir: {}
          name: redis-data
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
  namespace: default
spec:
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  selector:
    app: redis-cart
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  namespace: default
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      containers:
        - env:
            - name: PORT
              value: "50051"
          securityContext:
            capabilities:
              drop:
                - all
          image: edenfed/shippingservice:v2.1
          name: server
          ports:
            - containerPort: 50051
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  namespace: default
spec:
  ports:
    - name: grpc
      port: 50051
      targetPort: 50051
  selector:
    app: shippingservice
  type: ClusterIP
---
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  annotations:
    odigos.io/skip: "true"
  labels:
    odigos-instrumentation: disabled
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        - command:
            - /bin/sh
            - -exc
            - |
              echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
              STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
              if test $STATUSCODE -ne 200; then
                  echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
                  exit 1
              fi
          name: frontend-check
          image: busybox:latest
          env:
            - name: FRONTEND_ADDR
              value: "frontend:80"
      containers:
        - name: main
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            readOnlyRootFilesystem: true
          image: edenfed/loadgenerator:v2.1
          env:
            - name: FRONTEND_ADDR
              value: "frontend:80"
            - name: USERS
              value: "10"
          resources:
            requests:
              cpu: 300m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
---
apiVersion: v1
kind: Namespace
metadata:
  name: sock-shop
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    name: carts
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts
  template:
    metadata:
      labels:
        name: carts
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: carts
          image: weaveworksdemos/carts:0.4.8
          ports:
            - containerPort: 80
          env:
            - name: JAVA_OPTS
              value: "-Xms256m -Xmx512m"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+PrintFlagsFinal"
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    name: carts
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: carts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts-db
  template:
    metadata:
      labels:
        name: carts-db
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: carts-db
          image: mongo:3.6.19
          ports:
            - name: mongo
              containerPort: 27017
          securityContext:
            capabilities:
              drop:
                - all
              add:
                - CHOWN
                - SETGID
                - SETUID
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 27017
      targetPort: 27017
  selector:
    name: carts-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: catalogue
          image: weaveworksdemos/catalogue:0.3.5
          command: ["/app"]
          args:
            - -port=80
          ports:
            - containerPort: 80
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: catalogue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue-db
  template:
    metadata:
      labels:
        name: catalogue-db
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: catalogue-db
          image: weaveworksdemos/catalogue-db:0.3.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: fake_password
            - name: MYSQL_DATABASE
              value: socksdb
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otel-collector.otel-collector.svc.cluster.local:4317"
          securityContext:
            capabilities:
              drop:
                - all
          ports:
            - name: mysql
              containerPort: 3306
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 3306
      targetPort: 3306
  selector:
    name: catalogue-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: front-end
  template:
    metadata:
      labels:
        name: front-end
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: front-end
          image: weaveworksdemos/front-end:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8079
          env:
            - name: SESSION_REDIS
              value: "true"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otel-collector.otel-collector.svc.cluster.local:4317"
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
            readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  labels:
    name: front-end
  namespace: sock-shop
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8079
      nodePort: 30012
  selector:
    name: front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    name: orders
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders
  template:
    metadata:
      labels:
        name: orders
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: orders
          image: weaveworksdemos/orders:0.4.7
          ports:
            - containerPort: 80
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    name: orders
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: orders
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders-db
  template:
    metadata:
      labels:
        name: orders-db
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: orders-db
          image: mongo:3.6.19
          ports:
            - name: mongo
              containerPort: 27017
          securityContext:
            capabilities:
              drop:
                - all
              add:
                - CHOWN
                - SETGID
                - SETUID
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 27017
      targetPort: 27017
  selector:
    name: orders-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    name: payment
  namespace: sock-shop
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: payment
  template:
    metadata:
      labels:
        name: payment
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: payment
          image: weaveworksdemos/payment:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    name: payment
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  labels:
    name: queue-master
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: queue-master
  template:
    metadata:
      labels:
        name: queue-master
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: queue-master
          image: weaveworksdemos/queue-master:master-b8bcfc79
          securityContext:
            capabilities:
              drop:
                - all
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  labels:
    name: queue-master
  annotations:
    prometheus.io/path: "/prometheus"
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: queue-master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.8.16-management
          ports:
            - containerPort: 15672
              name: management
            - containerPort: 5672
              name: rabbitmq
            - containerPort: 15692
              name: metrics
          securityContext:
            capabilities:
              drop:
                - all
              add:
                - CHOWN
                - SETGID
                - SETUID
                - DAC_OVERRIDE
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 5672
      name: rabbitmq
      targetPort: 5672
    - port: 15692
      name: metrics
  selector:
    name: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: session-db
  labels:
    name: session-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: session-db
  template:
    metadata:
      labels:
        name: session-db
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: session-db
          image: redis:alpine
          ports:
            - name: redis
              containerPort: 6379
          securityContext:
            capabilities:
              drop:
                - all
              add:
                - CHOWN
                - SETGID
                - SETUID
            readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: session-db
  labels:
    name: session-db
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 6379
      targetPort: 6379
  selector:
    name: session-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shipping
  template:
    metadata:
      labels:
        name: shipping
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: shipping
          image: weaveworksdemos/shipping:0.4.8
          ports:
            - containerPort: 80
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: shipping

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    name: user
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user
  template:
    metadata:
      labels:
        name: user
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: user
          image: weaveworksdemos/user:0.4.7
          env:
            - name: mongo
              value: user-db:27017
          ports:
            - containerPort: 80
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            capabilities:
              drop:
                - all
              add:
                - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user
  labels:
    name: user
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      targetPort: 80
  selector:
    name: user

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user-db
  template:
    metadata:
      labels:
        name: user-db
      annotations:
        prometheus.io.scrape: "true"
    spec:
      containers:
        - name: user-db
          image: weaveworksdemos/user-db:0.3.0

          ports:
            - name: mongo
              containerPort: 27017
          securityContext:
            capabilities:
              drop:
                - all
              add:
                - CHOWN
                - SETGID
                - SETUID
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: sock-shop
spec:
  ports:
    # the port that this service should serve on
    - port: 27017
      targetPort: 27017
  selector:
    name: user-db