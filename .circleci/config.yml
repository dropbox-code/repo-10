version: 2

workflows:
  version: 2
  test:
    jobs:
      - test-netstandard2.0
      - test-android
      - test-ios

jobs:  
  test-netstandard2.0:
    docker:
      - image: microsoft/dotnet:2.0-sdk-jessie
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: "true" # suppresses annoying debug output from embedded HTTP servers in tests
    steps:
      - checkout
      - run: dotnet restore
      - run: dotnet build src/LaunchDarkly.XamarinSdk -f netstandard2.0
      - run: dotnet test -v=normal tests/LaunchDarkly.XamarinSdk.Tests/LaunchDarkly.XamarinSdk.Tests.csproj -f netcoreapp2.0

  test-android:
    docker:
      - image: ldcircleci/ld-xamarin-android-linux:api27

    environment:
      LD_SKIP_XML_DOCS: 1  # there seems to be a bug in Xamarin Android builds on Linux that makes the XML build step fail

    steps:
      - checkout

      - run:
          name: Build SDK
          command: msbuild /restore /p:TargetFramework=MonoAndroid81 src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: ~/xamarin-android/bin/Debug/bin/xabuild /restore /t:SignAndroidPackage tests/LaunchDarkly.XamarinSdk.Android.Tests/LaunchDarkly.XamarinSdk.Android.Tests.csproj
          # Note, xabuild is just a wrapper for msbuild that adds various tools paths etc. necessary for building an
          # Android app. See: https://github.com/xamarin/xamarin-android/blob/master/tools/scripts/xabuild

      - run:
          name: Set up emulator
          command: echo no | avdmanager create avd -n xm-android -f -k "system-images;android-24;default;armeabi-v7a"

      - run:
          name: Start emulator
          command: emulator -avd xm-android -netdelay none -netspeed full -no-audio -no-window -no-snapshot -use-system-libs -no-boot-anim
          background: true
          timeout: 1200
          no_output_timeout: 20m

      - run:
          name: Wait for emulator to become available
          command: circle-android wait-for-boot
          # this script is provided in the CircleCI Android images:
          # https://raw.githubusercontent.com/circleci/circleci-images/master/android/bin/circle-android

      - run: 
          name: Start capturing log output
          command: adb logcat mono-stdout:D *:S | tee test-run.log
          # mono-stdout is the default tag for standard output from a Xamarin app - that's where our test runner output goes
          background: true
          no_output_timeout: 10m

      - run:
          name: Deploy app to emulator
          command: adb install tests/LaunchDarkly.XamarinSdk.Android.Tests/bin/Debug/com.launchdarkly.xamarinandroidtests-Signed.apk
      
      - run:
          name: Start app in emulator
          command: adb shell monkey -p com.launchdarkly.xamarinandroidtests 1

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,7-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.

  test-ios:
    macos:
      xcode: "10.2.1"

    environment:
      PATH: /usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Commands
    
    steps:
      - restore_cache:
          key: homebrew

      - run:
          name: Install Xamarin tools
          command: |
            brew cask install xamarin xamarin-ios mono-mdk
          # Note, "mono-mdk" provides the msbuild CLI tool

      - save_cache: 
          key: homebrew
          paths:
              - /usr/local/Homebrew

      - checkout

      - run:
          name: Build SDK
          command: msbuild /restore /p:TargetFramework=Xamarin.iOS10 src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: msbuild /restore tests/LaunchDarkly.XamarinSdk.iOS.Tests/LaunchDarkly.XamarinSdk.iOS.Tests.csproj

      - run:
          name: Start simulator
          command: |
            xcrun simctl create xm-ios com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-12-2
            xcrun simctl boot xm-ios

      - run:
          name: Load test app into simulator
          command: xcrun simctl install "xm-ios" tests/LaunchDarkly.XamarinSdk.iOS.Tests/bin/iPhoneSimulator/Debug/LaunchDarkly.XamarinSdk.iOS.Tests.app

      - run:
          name: Start capturing log output
          command: xcrun simctl spawn booted log stream --predicate 'senderImagePath contains "LaunchDarkly.XamarinSdk.iOS.Tests"' | tee test-run.log
          background: true

      - run:
          name: Launch test app in simulator
          command: xcrun simctl launch "xm-ios" com.launchdarkly.XamarinSdkTests

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,9-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.
