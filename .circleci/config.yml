version: 2

workflows:
  version: 2
  test:
    jobs:
      - test-netstandard2.0
      - test-android
      - test-ios

jobs:  
  test-netstandard2.0:
    docker:
      - image: ldcircleci/dotnet5-release:1
      # This image is based on mcr.microsoft.com/dotnet/sdk:5.0-focal but is in a
      # slightly better state for us to install the make tool (apt-get update has
      # already been done). See: https://github.com/launchdarkly/sdks-ci-docker
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: "true" # suppresses annoying debug output from embedded HTTP servers in tests
      TEST_HARNESS_PARAMS: -junit /tmp/circle-reports/contract-tests-junit.xml
      TESTFRAMEWORK: net5.0
    steps:
      - checkout
      - run: apt install -y make
      - run: mkdir -p /tmp/circle-reports
      - run: dotnet restore src/LaunchDarkly.ClientSdk
      - run: dotnet build src/LaunchDarkly.ClientSdk -f netstandard2.0
      - run: dotnet restore tests/LaunchDarkly.ClientSdk.Tests
      - run:
          name: run unit tests
          command: |
            dotnet test -v=normal \
              --logger:"junit;LogFilePath=/tmp/circle-reports/unit-tests.xml" \
              tests/LaunchDarkly.ClientSdk.Tests/LaunchDarkly.ClientSdk.Tests.csproj

      - run: make build-contract-tests
      - run:
          command: make start-contract-test-service
          background: true
      - run: make run-contract-tests

      - store_test_results:
          path: /tmp/circle-reports

  test-android:
    macos:
      xcode: "12.4.0"
    resource_class: macos.x86.medium.gen2

    environment:
      TERM: dumb
      QEMU_AUDIO_DRV: none

    steps:
      - checkout

      - run:
          name: Install .NET/Xamarin build tools
          command: .circleci/scripts/macos-install-xamarin.sh android

      - run:
          name: Install Android SDK
          command: .circleci/scripts/macos-install-android-sdk.sh 27

      - run:
          name: Set up emulator
          command: echo no | avdmanager create avd -n ci-android-avd -f -k "system-images;android-27;default;x86"

      - run:
          name: Start emulator
          command: $ANDROID_HOME/emulator/emulator -avd ci-android-avd -netdelay none -netspeed full -no-audio -no-window -no-snapshot -no-boot-anim
          background: true
          timeout: 1200
          no_output_timeout: 2h

      - run:
          name: Build SDK
          command: |
            msbuild /restore /p:TargetFramework=MonoAndroid81 \
              src/LaunchDarkly.ClientSdk/LaunchDarkly.ClientSdk.csproj

      - run:
          name: Build test project
          command: |
            msbuild /restore /t:SignAndroidPackage \
              tests/LaunchDarkly.ClientSdk.Android.Tests/LaunchDarkly.ClientSdk.Android.Tests.csproj

      - run:
          name: Wait for emulator
          command: .circleci/scripts/circle-android wait-for-boot

      - run: 
          name: Start capturing log output
          command: adb logcat mono-stdout:D AndroidRuntime:D *:S | tee test-run.log
          # mono-stdout is the default tag for standard output from a Xamarin app - that's where our test runner output goes
          background: true
          no_output_timeout: 10m

      - run:
          name: Deploy app to emulator
          command: adb install tests/LaunchDarkly.ClientSdk.Android.Tests/bin/Debug/com.launchdarkly.xamarinandroidtests-Signed.apk
      
      - run:
          name: Start app in emulator
          command: adb shell monkey -p com.launchdarkly.xamarinandroidtests 1

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,7-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.

  test-ios:
    macos:
      xcode: "12.4.0"
    resource_class: macos.x86.medium.gen2

    steps:
      - checkout

      - run:
          name: Install .NET/Xamarin build tools
          command: .circleci/scripts/macos-install-xamarin.sh ios

      - run:
          name: Build SDK
          command: msbuild /restore /p:Configuration=Debug /p:TargetFramework=Xamarin.iOS10 src/LaunchDarkly.ClientSdk/LaunchDarkly.ClientSdk.csproj

      - run:
          name: Build test project
          command: msbuild /restore /p:Configuration=Debug /p:Platform=iPhoneSimulator tests/LaunchDarkly.ClientSdk.iOS.Tests/LaunchDarkly.ClientSdk.iOS.Tests.csproj
          # Note that we must specify Platform=iPhoneSimulator here explicitly because, when using a current
          # version of msbuild with a project file that uses MSBuild.Sdk.Extras, it seems like Platform does *not*
          # default to an empty string (I think it defaults to "AnyCPU"), therefore it will try to build it for a
          # real iPhone, which will fail because it can't do code signing. We want a debug build that we will only
          # be running in the simulator.
          
      - run:
          name: Start simulator
          command: |
            xcrun simctl create xm-ios com.apple.CoreSimulator.SimDeviceType.iPhone-12 com.apple.CoreSimulator.SimRuntime.iOS-14-4
            xcrun simctl boot xm-ios

      - run:
          name: Load test app into simulator
          command: xcrun simctl install "xm-ios" tests/LaunchDarkly.ClientSdk.iOS.Tests/bin/Debug/xamarin.ios10/LaunchDarkly.ClientSdk.iOS.Tests.app

      - run:
          name: Start capturing log output
          command: xcrun simctl spawn booted log stream --predicate 'senderImagePath contains "LaunchDarkly.ClientSdk.iOS.Tests"' | tee test-run.log
          background: true

      - run:
          name: Launch test app in simulator
          command: xcrun simctl launch "xm-ios" com.launchdarkly.ClientSdkTests

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,9-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.
