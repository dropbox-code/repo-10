version: 2

workflows:
  version: 2
  test:
    jobs:
      - test-netstandard2.0
      - test-android
      - test-ios

jobs:  
  test-netstandard2.0:
    docker:
      - image: microsoft/dotnet:2.0-sdk-jessie
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: "true" # suppresses annoying debug output from embedded HTTP servers in tests
    steps:
      - checkout
      - run: dotnet restore
      - run: dotnet build src/LaunchDarkly.XamarinSdk -f netstandard2.0
      - run: dotnet test tests/LaunchDarkly.XamarinSdk.Tests/LaunchDarkly.XamarinSdk.Tests.csproj -f netcoreapp2.0

  test-android:
    docker:
      - image: circleci/android:api-27

    steps:
      - checkout

      - run: sdkmanager "system-images;android-24;default;armeabi-v7a" || true
      - run: sdkmanager --licenses

      - run: sudo apt install apt-transport-https dirmngr gnupg ca-certificates && sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && echo "deb https://download.mono-project.com/repo/debian stable-stretch main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list && sudo apt update
      - run: echo y | sudo apt install mono-devel nuget libzip4
      
      - restore_cache:
          key: xamarin-android-cache-v9-2-99-172
      - run: ./scripts/check_xamarin_android_cache.sh
      - save_cache:
          key: xamarin-android-cache-v9-2-99-172
          paths:
              - ~/project/xamarin.android-oss_v9.2.99.172_Linux-x86_64_master_d33bbd8e-Release  

      - run: sudo mkdir "/usr/lib/xamarin.android" && sudo mkdir "/usr/lib/mono/xbuild/Xamarin/"
      - run: cd ./xamarin.android-oss_v9.2.99.172_Linux-x86_64_master_d33bbd8e-Release && sudo cp -a "bin/Debug/lib/xamarin.android/." "/usr/lib/xamarin.android/"
      - run: rm -rf "/usr/lib/mono/xbuild/Xamarin/Android" && rm -rf "/usr/lib/mono/xbuild-frameworks/MonoAndroid"
      - run: sudo ln -s "/usr/lib/xamarin.android/xbuild/Xamarin/Android/" "/usr/lib/mono/xbuild/Xamarin/Android" && sudo ln -s "/usr/lib/xamarin.android/xbuild-frameworks/MonoAndroid/" "/usr/lib/mono/xbuild-frameworks/MonoAndroid"
 
      - run:
          name: Build SDK
          command: msbuild /restore /p:TargetFramework=MonoAndroid81 src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: msbuild /restore tests/LaunchDarkly.XamarinSdk.Android.Tests/LaunchDarkly.XamarinSdk.Android.Tests.csproj

  test-ios:
    macos:
      xcode: "10.2.1"

    environment:
      PATH: /usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Commands
    
    steps:
      - restore_cache:
          key: homebrew

      - run:
          name: Install Xamarin tools
          command: |
            brew install caskroom/cask/brew-cask
            brew cask install xamarin xamarin-ios mono-mdk
          # Note, "mono-mdk" provides the msbuild CLI tool

      - save_cache: 
          key: homebrew
          paths:
              - /usr/local/Homebrew

      - checkout

      - run:
          name: Build SDK
          command: msbuild /restore /p:TargetFramework=Xamarin.iOS10 src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: msbuild /restore tests/LaunchDarkly.XamarinSdk.iOS.Tests/LaunchDarkly.XamarinSdk.iOS.Tests.csproj

      - run:
          name: Start simulator
          command: |
            xcrun simctl create xm-ios com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-12-2
            xcrun simctl boot xm-ios

      - run:
          name: Load test app into simulator
          command: xcrun simctl install "xm-ios" tests/LaunchDarkly.XamarinSdk.iOS.Tests/bin/iPhoneSimulator/Debug/LaunchDarkly.XamarinSdk.iOS.Tests.app

      - run:
          name: Start capturing log output
          command: xcrun simctl spawn booted log stream --predicate 'senderImagePath contains "LaunchDarkly.XamarinSdk.iOS.Tests"' >test-run.log
          background: true

      - run:
          name: Launch test app in simulator
          command: xcrun simctl launch "xm-ios" com.launchdarkly.XamarinSdkTests

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,9-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.
