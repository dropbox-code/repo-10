version: 2

workflows:
  version: 2
  test:
    jobs:
      - test-netstandard2.0
      - test-android
      - test-ios

jobs:  
  test-netstandard2.0:
    docker:
      - image: microsoft/dotnet:2.0-sdk-jessie
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: "true" # suppresses annoying debug output from embedded HTTP servers in tests
    steps:
      - checkout
      - run: dotnet restore
      - run: dotnet build src/LaunchDarkly.XamarinSdk -f netstandard2.0
      - run: dotnet test -v=normal tests/LaunchDarkly.XamarinSdk.Tests/LaunchDarkly.XamarinSdk.Tests.csproj -f netcoreapp2.0

  test-android:
    macos:
      xcode: "10.3.0"

    environment:
      PATH: /usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Commands
      TERM: dumb
      QEMU_AUDIO_DRV: none
      ANDROID_HOME: "/usr/local/share/android-sdk"
      ANDROID_SDK_HOME: "/usr/local/share/android-sdk"
      ANDROID_SDK_ROOT: "/usr/local/share/android-sdk"

    steps:
      - run:
          name: Setup env
          command: |
            echo 'export PATH="$PATH:/$ANDROID_HOME/tools/bin"' >> $BASH_ENV
            echo 'export PATH="$PATH:/$ANDROID_HOME/platform-tools"' >> $BASH_ENV

      - restore_cache:
          key: homebrew-xamarin-android

      - run:
          name: Install Xamarin Android tools
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install xamarin xamarin-android mono-mdk
          # Note, "mono-mdk" provides the msbuild CLI tool

      - run:
          name: Install Android SDK
          command: |
            if [ ! -d "$ANDROID_HOME" ]; then
              HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk
            fi

      - run:
          name: Set up Android SDK
          command: |
            sudo mkdir -p /usr/local/android-sdk-linux/licenses
            yes | sdkmanager "platform-tools" "platforms;android-27" "extras;intel;Hardware_Accelerated_Execution_Manager" \
              "build-tools;26.0.2" "system-images;android-27;default;x86" "emulator" | grep -v = || true
            set +o pipefail
            yes | sdkmanager --licenses >/dev/null

      - save_cache:
          key: homebrew-xamarin-android
          paths:
            - /usr/local/Homebrew
            - /usr/local/share/android-sdk

      - checkout

      - run:
          name: Set up emulator
          command: echo no | avdmanager create avd -n ci-android-avd -f -k "system-images;android-27;default;x86"

      - run:
          name: Start emulator
          command: $ANDROID_HOME/emulator/emulator -avd ci-android-avd -netdelay none -netspeed full -no-audio -no-window -no-snapshot -no-boot-anim
          background: true
          timeout: 1200
          no_output_timeout: 2h

      - run:
          name: Build SDK
          command: |
            msbuild /restore /p:TargetFramework=MonoAndroid81 \
              src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: |
            msbuild /restore /t:SignAndroidPackage \
              tests/LaunchDarkly.XamarinSdk.Android.Tests/LaunchDarkly.XamarinSdk.Android.Tests.csproj

      - run:
          name: Wait for emulator
          command: .circleci/scripts/circle-android wait-for-boot

      - run: 
          name: Start capturing log output
          command: adb logcat mono-stdout:D AndroidRuntime:D *:S | tee test-run.log
          # mono-stdout is the default tag for standard output from a Xamarin app - that's where our test runner output goes
          background: true
          no_output_timeout: 10m

      - run:
          name: Deploy app to emulator
          command: adb install tests/LaunchDarkly.XamarinSdk.Android.Tests/bin/Debug/com.launchdarkly.xamarinandroidtests-Signed.apk
      
      - run:
          name: Start app in emulator
          command: adb shell monkey -p com.launchdarkly.xamarinandroidtests 1

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,7-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.

  test-ios:
    macos:
      xcode: "11.3.0"

    environment:
      PATH: /usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Frameworks/Mono.framework/Commands
    
    steps:
      - restore_cache:
          key: homebrew

      - run:
          name: Install Xamarin tools
          command: |
            brew untap caskroom/versions  # avoids conflict on mono-mdk516
            brew cask install xamarin xamarin-ios mono-mdk
          # Note, "mono-mdk" provides the msbuild CLI tool

      - save_cache: 
          key: homebrew
          paths:
              - /usr/local/Homebrew

      - checkout

      - run:
          name: Build SDK
          command: msbuild /restore /p:Configuration=Debug /p:TargetFramework=Xamarin.iOS10 src/LaunchDarkly.XamarinSdk/LaunchDarkly.XamarinSdk.csproj

      - run:
          name: Build test project
          command: msbuild /restore /p:Configuration=Debug /p:Platform=iPhoneSimulator tests/LaunchDarkly.XamarinSdk.iOS.Tests/LaunchDarkly.XamarinSdk.iOS.Tests.csproj
          # Note that we must specify Platform=iPhoneSimulator here explicitly because, when using a current
          # version of msbuild with a project file that uses MSBuild.Sdk.Extras, it seems like Platform does *not*
          # default to an empty string (I think it defaults to "AnyCPU"), therefore it will try to build it for a
          # real iPhone, which will fail because it can't do code signing. We want a debug build that we will only
          # be running in the simulator.
          
      - run:
          name: Start simulator
          command: |
            xcrun simctl create xm-ios com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-12-2
            xcrun simctl boot xm-ios

      - run:
          name: Load test app into simulator
          command: xcrun simctl install "xm-ios" tests/LaunchDarkly.XamarinSdk.iOS.Tests/bin/Debug/xamarin.ios10/LaunchDarkly.XamarinSdk.iOS.Tests.app

      - run:
          name: Start capturing log output
          command: xcrun simctl spawn booted log stream --predicate 'senderImagePath contains "LaunchDarkly.XamarinSdk.iOS.Tests"' | tee test-run.log
          background: true

      - run:
          name: Launch test app in simulator
          command: xcrun simctl launch "xm-ios" com.launchdarkly.XamarinSdkTests

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,9-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.
