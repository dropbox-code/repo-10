version: 2.1

orbs:
  android: circleci/android@2.1.2

workflows:
  test:
    jobs:
      - test_dotnet_standard
      - build_android_and_ios
      - test_android:
          requires:
            - build_android_and_ios
      - test_ios:
          requires:
            - build_android_and_ios

jobs:
  test_dotnet_standard:
    # Technically we could omit the "build the SDK" step here if we made this job depend on the build products
    # from build_android_and_ios. However, setting up the Linux build is so much faster than the Mac host that
    # it's better to let this one run independently so we can get quick CI feedback for any basic problems.
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: "true" # suppresses annoying debug output from embedded HTTP servers in tests
      TEST_HARNESS_PARAMS: -junit /tmp/circle-reports/contract-tests-junit.xml
      TESTFRAMEWORK: netcoreapp3.1
    steps:
      - checkout
      - run: mkdir -p /tmp/circle-reports
      - run: dotnet restore src/LaunchDarkly.ClientSdk
      - run: dotnet build src/LaunchDarkly.ClientSdk -f netstandard2.0
      - run: dotnet restore tests/LaunchDarkly.ClientSdk.Tests
      - run:
          name: run unit tests
          command: |
            dotnet test -v=normal \
              --logger:"junit;LogFilePath=/tmp/circle-reports/unit-tests.xml" \
              tests/LaunchDarkly.ClientSdk.Tests/LaunchDarkly.ClientSdk.Tests.csproj

      - run:
          name: build contract tests
          command: ./scripts/build-contract-tests.sh
      - run:
          name: run contract test service
          command: ./scripts/start-contract-test-service.sh
          background: true
      - run:
          name: run contract tests
          command: ./scripts/run-contract-tests.sh

      - store_test_results:
          path: /tmp/circle-reports

  build_android_and_ios:
    macos:
      xcode: "13.4.1"
    resource_class: macos.x86.medium.gen2

    steps:
      - checkout

      - run:
          name: Install .NET/Xamarin build tools
          command: .circleci/scripts/macos-install-xamarin.sh android ios

      - run:
          name: Install Android SDK
          command: .circleci/scripts/macos-install-android-sdk.sh 27

      - run:
          name: Build SDK for MonoAndroid81
          # Deliberately building only the version of MonoAndroid that we will use in the tests;
          # otherwise we would have to install more SDKs
          command: |
            msbuild /restore /p:Configuration=debug /p:TargetFramework=MonoAndroid81 \
              src/LaunchDarkly.ClientSdk/LaunchDarkly.ClientSdk.csproj

      - run:
          name: Build SDK for Xamarin.iOS10
          # Unfortunately msbuild doesn't allow us to specify multiple specific target frameworks in one command
          command: |
            msbuild /restore /p:Configuration=debug /p:TargetFramework=Xamarin.iOS10 \
              src/LaunchDarkly.ClientSdk/LaunchDarkly.ClientSdk.csproj

      - run:
          name: Build Android test project
          command: |
            msbuild /restore /p:Configuration=Debug /t:SignAndroidPackage \
              tests/LaunchDarkly.ClientSdk.Android.Tests/LaunchDarkly.ClientSdk.Android.Tests.csproj

      - run:
          name: Build iOS test project
          command: |
            msbuild /restore /p:Configuration=Debug /p:Platform=iPhoneSimulator \
              tests/LaunchDarkly.ClientSdk.iOS.Tests/LaunchDarkly.ClientSdk.iOS.Tests.csproj
          # Note that we must specify Platform=iPhoneSimulator here explicitly because, when using a current
          # version of msbuild with a project file that uses MSBuild.Sdk.Extras, it seems like Platform does *not*
          # default to an empty string (I think it defaults to "AnyCPU"), therefore it will try to build it for a
          # real iPhone, which will fail because it can't do code signing. We want a debug build that we will only
          # be running in the simulator.

      - persist_to_workspace:
          root: tests
          paths:
            - LaunchDarkly.ClientSdk.Android.Tests/bin/Debug
            - LaunchDarkly.ClientSdk.iOS.Tests/bin/Debug

  test_android:
    executor:
      name: android/android-machine
      tag: 2022.07.1
      resource-class: large

    steps:
      - checkout

      - attach_workspace:
          at: tests

      - android/create-avd:
          avd-name: ci-android-avd
          install: true
          system-image: system-images;android-27;default;x86

      - android/start-emulator:
          avd-name: ci-android-avd
          no-window: true
          wait-for-emulator: true
          restore-gradle-cache-post-emulator-launch: false  # this isn't a Gradle project
          post-emulator-launch-assemble-command: ""         # this isn't a Gradle project

      - run: 
          name: Start capturing log output
          command: adb logcat mono-stdout:D AndroidRuntime:D *:S | tee test-run.log
          # mono-stdout is the default tag for standard output from a Xamarin app - that's where our test runner output goes
          background: true
          no_output_timeout: 10m

      - run:
          name: Deploy app to emulator
          command: adb install tests/LaunchDarkly.ClientSdk.Android.Tests/bin/Debug/com.launchdarkly.xamarinandroidtests-Signed.apk
      
      - run:
          name: Start app in emulator
          command: adb shell monkey -p com.launchdarkly.xamarinandroidtests 1

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,7-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.

  test_ios:
    macos:
      xcode: "13.4.1"
    resource_class: macos.x86.medium.gen2

    steps:
      - checkout

      - attach_workspace:
          at: tests

      - run:
          name: Start simulator
          command: |
            xcrun simctl create xm-ios com.apple.CoreSimulator.SimDeviceType.iPhone-12 com.apple.CoreSimulator.SimRuntime.iOS-15-5
            xcrun simctl boot xm-ios

      - run:
          name: Load test app into simulator
          command: xcrun simctl install "xm-ios" tests/LaunchDarkly.ClientSdk.iOS.Tests/bin/Debug/xamarin.ios10/LaunchDarkly.ClientSdk.iOS.Tests.app

      - run:
          name: Start capturing log output
          command: xcrun simctl spawn booted log stream --predicate 'senderImagePath contains "LaunchDarkly.ClientSdk.iOS.Tests"' | tee test-run.log
          background: true

      - run:
          name: Launch test app in simulator
          command: xcrun simctl launch "xm-ios" com.launchdarkly.ClientSdkTests

      - run:
          name: Wait for tests to finish running
          # https://superuser.com/questions/270529/monitoring-a-file-until-a-string-is-found
          command: "( tail -f -c+0 test-run.log & ) | grep -q 'Tests run:'"

      - run:
          name: Show all test output
          command: |
            cat test-run.log | tr -s ' ' | cut -d ' ' -f 1,2,9-
            if grep '\[FAIL\]' test-run.log >/dev/null; then exit 1; fi
          # "exit 1" causes the CI job to fail if there were any test failures. Note that we still won't have a
          # JUnit-compatible test results file; you'll just have to look at the output.
